#!/usr/bin/env python3
from argparse import ArgumentParser, Namespace
from os import curdir, rename, scandir
from os.path import isfile
from pathlib import Path
from re import compile, fullmatch, sub, IGNORECASE
from typing import Pattern


re_flags = IGNORECASE


def to_path(value: str) -> Path:
    return Path(value, flags=re_flags)


def to_pattern(value: str) -> Pattern:
    return compile(value)


def re_rename(filename: str, pattern: Pattern, replace: str, verbose: bool = False, dry_run: bool = False):
    new_name = sub(pattern, replace, filename)
    if new_name != filename:
        if not dry_run:
            rename(filename, new_name)
        if verbose:
            print("renamed {} -> {}".format(filename, new_name))


def parse_args() -> Namespace:
    parser = ArgumentParser(description='Rename file with regexp')
    parser.add_argument('--case', '-c', action='store_true', default=False, help='case insensitive match')
    parser.add_argument('--directory', '-d', type=to_path, default=curdir, help='starting directory')
    parser.add_argument('--dry-run', '-n', action='store_true', dest='dry_run', default=False,
                        help='do not actually rename')
    parser.add_argument('--pattern', '-p', dest='find_pattern', type=to_pattern, default='.*', metavar='PATTERN',
                        help='find pattern')
    parser.add_argument('--verbose', '-v', action='store_true', default=False, help='be verbose')
    parser.add_argument('pattern', type=to_pattern, help='rename pattern')
    parser.add_argument('replace', help='replace string')
    parser.add_argument('files', nargs='*', help='files to rename')
    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    if not args.case:
        re_flags |= IGNORECASE
    if args.files:
        for filename in args.files:
            if isfile(filename):
                re_rename(filename, args.pattern, args.replace, verbose=args.verbose, dry_run=args.dry_run)
    else:
        with scandir(args.directory) as it:
            for entry in it:
                if fullmatch(args.find_pattern, entry.name):
                    re_rename(entry.name, args.pattern, args.replace, verbose=args.verbose, dry_run=args.dry_run)
